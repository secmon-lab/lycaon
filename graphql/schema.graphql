scalar Time

enum IncidentStatus {
  triage
  handling
  monitoring
  closed
}

type StatusHistory {
  id: ID!
  incidentId: ID!
  status: IncidentStatus!
  changedBy: User!
  changedAt: Time!
  note: String
}

type Incident {
  id: ID!
  channelId: String!
  channelName: String!
  title: String!
  description: String!
  categoryId: String!
  categoryName: String!
  severityId: String!
  severityName: String!
  severityLevel: Int!
  assetIds: [String!]!
  assetNames: [String!]!
  status: IncidentStatus
  lead: String
  leadUser: User
  originChannelId: String!
  originChannelName: String!
  teamId: String
  createdBy: String!
  createdByUser: User
  createdAt: Time!
  updatedAt: Time!
  initialTriage: Boolean!
  statusHistories: [StatusHistory!]!
  tasks: [Task!]!
  private: Boolean!
  viewerCanAccess: Boolean!
  isTest: Boolean!
}

type User {
  id: ID!
  slackUserId: String!
  name: String!
  realName: String!
  displayName: String!
  email: String!
  avatarUrl: String!
}

type Task {
  id: ID!
  incidentId: ID!
  title: String!
  description: String!
  status: TaskStatus!
  assigneeId: String
  assigneeUser: User
  createdBy: String!
  channelId: String!
  messageTs: String!
  createdAt: Time!
  updatedAt: Time!
  completedAt: Time
}

enum TaskStatus {
  todo
  follow_up
  completed
}

type Severity {
  id: String!
  name: String!
  description: String!
  level: Int!
}

type Asset {
  id: String!
  name: String!
  description: String!
}

type IncidentConnection {
  edges: [IncidentEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type IncidentEdge {
  node: Incident!
  cursor: String!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  # Get paginated list of incidents
  incidents(first: Int, after: String): IncidentConnection!

  # Get a specific incident by ID
  incident(id: ID!): Incident

  # Get status history for a specific incident
  incidentStatusHistory(incidentId: ID!): [StatusHistory!]!

  # Get tasks for a specific incident
  tasks(incidentId: ID!): [Task!]!

  # Get a specific task
  task(id: ID!): Task

  # Get channel members for incident channel
  channelMembers(channelId: String!): [User!]!

  # Get all severities
  severities: [Severity!]!

  # Get all assets
  assets: [Asset!]!

  # Get recent open incidents grouped by date
  recentOpenIncidents(days: Int = 7): [GroupedIncidents!]!

  # Get incident trend by severity for specified weeks
  incidentTrendBySeverity(weeks: Int = 4): [WeeklySeverityCount!]!
}

type Mutation {
  # Update incident
  updateIncident(id: ID!, input: UpdateIncidentInput!): Incident!
  
  # Update incident status
  updateIncidentStatus(incidentId: ID!, status: IncidentStatus!, note: String): Incident!
  
  # Create a new task
  createTask(input: CreateTaskInput!): Task!
  
  # Update a task
  updateTask(id: ID!, input: UpdateTaskInput!): Task!
  
  # Delete a task
  deleteTask(id: ID!): Boolean!
}

input UpdateIncidentInput {
  title: String
  description: String
  lead: String
  status: IncidentStatus
  severityId: String
  assetIds: [String!]
}

input CreateTaskInput {
  incidentId: ID!
  title: String!
  description: String
  assigneeId: String
}

input UpdateTaskInput {
  title: String
  description: String
  status: TaskStatus
  assigneeId: String
}

# Dashboard types

# Incidents grouped by date
type GroupedIncidents {
  date: Time!
  incidents: [Incident!]!
}

# Weekly severity count data
type WeeklySeverityCount {
  weekStart: Time!
  weekEnd: Time!
  weekLabel: String!
  severityCounts: [SeverityCount!]!
}

# Severity count item
type SeverityCount {
  severityId: String!
  severityName: String!
  severityLevel: Int!
  count: Int!
}