package interfaces

//go:generate moq -out mocks/usecase_mock.go -pkg mocks . SlackMessage Incident Task Invite StatusUseCase Auth

import (
	"context"

	"github.com/secmon-lab/lycaon/pkg/domain/model"
	"github.com/secmon-lab/lycaon/pkg/domain/types"
	"github.com/slack-go/slack/slackevents"
)

// IncidentCommand represents the result of parsing an incident command
type IncidentCommand struct {
	IsIncidentTrigger bool
	Title             string
	Description       string // Generated by LLM if not provided
	CategoryID        string // Selected by LLM
}

// SlackInteractionData represents parsed Slack interaction data prepared by controller
type SlackInteractionData struct {
	Type       string
	UserID     string
	TeamID     string
	ChannelID  string
	TriggerID  string
	RawPayload []byte
}

// SlackMessage defines the interface for Slack message processing
type SlackMessage interface {
	// ProcessMessage processes an incoming Slack message
	ProcessMessage(ctx context.Context, event *slackevents.MessageEvent) error

	// GenerateResponse generates an LLM response for a message
	GenerateResponse(ctx context.Context, message *model.Message) (string, error)

	// SaveAndRespond saves a message and generates a response
	SaveAndRespond(ctx context.Context, event *slackevents.MessageEvent) (string, error)

	// IsBasicIncidentTrigger quickly checks if message is an inc command (without LLM analysis)
	IsBasicIncidentTrigger(ctx context.Context, message *model.Message) bool

	// ParseIncidentCommand parses a Slack message to check if it's an incident trigger and extract title
	ParseIncidentCommand(ctx context.Context, message *model.Message) IncidentCommand

	// SendProcessingMessage sends an immediate processing context message
	SendProcessingMessage(ctx context.Context, channelID, messageTS string) error

	// SendIncidentMessage sends an incident creation prompt message
	SendIncidentMessage(ctx context.Context, channelID, messageTS, title, description, categoryID string) error
}

// SlackInteraction defines the interface for handling all Slack interactions
// UseCase responsibility: Business logic execution, domain model manipulation, error handling
type SlackInteraction interface {
	// HandleBlockActions handles block action interactions (buttons)
	HandleBlockActions(ctx context.Context, data *SlackInteractionData) error

	// HandleViewSubmission handles modal/view submission interactions
	HandleViewSubmission(ctx context.Context, data *SlackInteractionData) error

	// HandleShortcut handles shortcut interactions
	HandleShortcut(ctx context.Context, data *SlackInteractionData) error
}

// OAuthConfig represents OAuth configuration
type OAuthConfig struct {
	ClientID     string
	ClientSecret string
	RedirectURI  string
	State        string
}

// OAuthURL represents OAuth URL information
type OAuthURL struct {
	URL    string
	State  string
	TeamID string
}

// Auth defines the interface for authentication operations
type Auth interface {
	// GenerateOAuthURL generates Slack OAuth URL with team ID from API
	GenerateOAuthURL(ctx context.Context, config OAuthConfig) (*OAuthURL, error)

	// HandleCallback processes the OAuth callback using OpenID Connect
	HandleCallback(ctx context.Context, code, redirectURI string) (*model.User, error)

	// CreateSession creates a new session for a user
	CreateSession(ctx context.Context, slackUserID, userName, userEmail string) (*model.Session, error)

	// ValidateSession validates a session by ID and secret
	ValidateSession(ctx context.Context, sessionID, sessionSecret string) (*model.Session, error)

	// DeleteSession deletes a session
	DeleteSession(ctx context.Context, sessionID string) error

	// GetUserFromSession gets user information from a session
	GetUserFromSession(ctx context.Context, sessionID string) (*model.User, error)

	// GetChannelMembers gets all members of a Slack channel
	GetChannelMembers(ctx context.Context, channelID string) ([]*model.User, error)
}

// Incident defines the interface for incident management
type Incident interface {
	CreateIncident(ctx context.Context, req *model.CreateIncidentRequest) (*model.Incident, error)
	GetIncident(ctx context.Context, id int) (*model.Incident, error)
	GetIncidentByChannelID(ctx context.Context, channelID types.ChannelID) (*model.Incident, error)
	// UpdateIncidentDetails updates incident title, description, and lead
	UpdateIncidentDetails(ctx context.Context, incidentID types.IncidentID, title, description string, lead types.SlackUserID) (*model.Incident, error)
	// CreateIncidentFromInteraction handles the complete incident creation flow from a Slack interaction
	CreateIncidentFromInteraction(ctx context.Context, originChannelID, title, userID string) (*model.Incident, error)
	// HandleCreateIncidentAction handles the create incident button click action
	// This includes retrieving the request, creating the incident, and cleaning up
	HandleCreateIncidentAction(ctx context.Context, requestID, userID string) (*model.Incident, error)
	// HandleCreateIncidentActionAsync handles the create incident button click with async processing and error messaging
	HandleCreateIncidentActionAsync(ctx context.Context, requestID, userID, channelID string)
	// HandleCreateIncidentWithDetails handles the create incident with edited details from modal
	HandleCreateIncidentWithDetails(ctx context.Context, requestID, title, description, categoryID, userID string) (*model.Incident, error)
	// GetIncidentRequest retrieves an incident request by ID
	GetIncidentRequest(ctx context.Context, requestID string) (*model.IncidentRequest, error)
	// HandleEditIncidentAction handles the edit incident button click action
	// This includes retrieving the request, opening the modal, and error handling
	HandleEditIncidentAction(ctx context.Context, requestID, userID, triggerID string) error
}

// TaskUpdateRequest represents parameters for updating a task
type TaskUpdateRequest struct {
	Title       *string
	Description *string
	Status      *model.TaskStatus
	AssigneeID  *types.SlackUserID
	MessageTS   *string
	ChannelID   *types.ChannelID
}

// Task defines the interface for task management
type Task interface {
	// CreateTask creates a new task for an incident
	CreateTask(ctx context.Context, incidentID types.IncidentID, title string, userID types.SlackUserID, channelID types.ChannelID, messageTS string) (*model.Task, error)
	// ListTasks retrieves all tasks for an incident
	ListTasks(ctx context.Context, incidentID types.IncidentID) ([]*model.Task, error)
	// UpdateTask updates an existing task
	UpdateTask(ctx context.Context, taskID types.TaskID, updates TaskUpdateRequest) (*model.Task, error)
	// UpdateTaskByIncident updates an existing task efficiently using incident ID
	UpdateTaskByIncident(ctx context.Context, incidentID types.IncidentID, taskID types.TaskID, updates TaskUpdateRequest) (*model.Task, error)
	// CompleteTask marks a task as completed
	CompleteTask(ctx context.Context, taskID types.TaskID) (*model.Task, error)
	// CompleteTaskByIncident marks a task as completed efficiently using incident ID
	CompleteTaskByIncident(ctx context.Context, incidentID types.IncidentID, taskID types.TaskID) (*model.Task, error)
	// UncompleteTask marks a task as incomplete
	UncompleteTask(ctx context.Context, taskID types.TaskID) (*model.Task, error)
	// UncompleteTaskByIncident marks a task as incomplete efficiently using incident ID
	UncompleteTaskByIncident(ctx context.Context, incidentID types.IncidentID, taskID types.TaskID) (*model.Task, error)
	// GetTask retrieves a task by ID
	GetTask(ctx context.Context, taskID types.TaskID) (*model.Task, error)
	// GetTaskByIncident retrieves a task by incident ID and task ID efficiently
	GetTaskByIncident(ctx context.Context, incidentID types.IncidentID, taskID types.TaskID) (*model.Task, error)
}

// Invite defines the interface for generic invitation functionality
type Invite interface {
	// InviteUsersByList invites users and groups to a channel
	InviteUsersByList(ctx context.Context,
		users []string, // User ID or @username list
		groups []string, // Group ID or @groupname list
		channelID types.ChannelID) (*model.InvitationResult, error)
}

// StatusUseCase defines the interface for incident status management
type StatusUseCase interface {
	// UpdateStatus updates the incident status and records the change in history
	UpdateStatus(ctx context.Context, incidentID types.IncidentID, status types.IncidentStatus, userID types.SlackUserID, note string) error

	// GetStatusHistory retrieves status history for an incident with user information
	GetStatusHistory(ctx context.Context, incidentID types.IncidentID) ([]*model.StatusHistoryWithUser, error)

	// PostStatusMessage posts a status message to the incident channel
	PostStatusMessage(ctx context.Context, channelID types.ChannelID, incidentID types.IncidentID) error

	// HandleEditStatusAction handles Slack edit status action
	HandleEditStatusAction(ctx context.Context, incidentIDStr string, userID types.SlackUserID, triggerID string) error

	// UpdateOriginalStatusMessage updates the original status message with new incident status
	UpdateOriginalStatusMessage(ctx context.Context, channelID types.ChannelID, messageTS string, incident *model.Incident) error
}
