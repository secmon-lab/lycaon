package interfaces

//go:generate moq -out mocks/usecase_mock.go -pkg mocks . SlackMessage Incident

import (
	"context"

	"github.com/secmon-lab/lycaon/pkg/domain/model"
	"github.com/slack-go/slack/slackevents"
)

// IncidentCommand represents the result of parsing an incident command
type IncidentCommand struct {
	IsIncidentTrigger bool
	Title             string
	Description       string // Generated by LLM if not provided
	CategoryID        string // Selected by LLM
}

// SlackMessage defines the interface for Slack message processing
type SlackMessage interface {
	// ProcessMessage processes an incoming Slack message
	ProcessMessage(ctx context.Context, event *slackevents.MessageEvent) error

	// GenerateResponse generates an LLM response for a message
	GenerateResponse(ctx context.Context, message *model.Message) (string, error)

	// SaveAndRespond saves a message and generates a response
	SaveAndRespond(ctx context.Context, event *slackevents.MessageEvent) (string, error)

	// IsBasicIncidentTrigger quickly checks if message is an inc command (without LLM analysis)
	IsBasicIncidentTrigger(ctx context.Context, message *model.Message) bool

	// ParseIncidentCommand parses a Slack message to check if it's an incident trigger and extract title
	ParseIncidentCommand(ctx context.Context, message *model.Message) IncidentCommand

	// SendProcessingMessage sends an immediate processing context message
	SendProcessingMessage(ctx context.Context, channelID, messageTS string) error

	// SendIncidentMessage sends an incident creation prompt message
	SendIncidentMessage(ctx context.Context, channelID, messageTS, title, description, categoryID string) error
}

// OAuthConfig represents OAuth configuration
type OAuthConfig struct {
	ClientID     string
	ClientSecret string
	RedirectURI  string
	State        string
}

// OAuthURL represents OAuth URL information
type OAuthURL struct {
	URL    string
	State  string
	TeamID string
}

// Auth defines the interface for authentication operations
type Auth interface {
	// GenerateOAuthURL generates Slack OAuth URL with team ID from API
	GenerateOAuthURL(ctx context.Context, config OAuthConfig) (*OAuthURL, error)

	// HandleCallback processes the OAuth callback using OpenID Connect
	HandleCallback(ctx context.Context, code, redirectURI string) (*model.User, error)

	// CreateSession creates a new session for a user
	CreateSession(ctx context.Context, slackUserID, userName, userEmail string) (*model.Session, error)

	// ValidateSession validates a session by ID and secret
	ValidateSession(ctx context.Context, sessionID, sessionSecret string) (*model.Session, error)

	// DeleteSession deletes a session
	DeleteSession(ctx context.Context, sessionID string) error

	// GetUserFromSession gets user information from a session
	GetUserFromSession(ctx context.Context, sessionID string) (*model.User, error)
}

// Incident defines the interface for incident management
type Incident interface {
	CreateIncident(ctx context.Context, req *model.CreateIncidentRequest) (*model.Incident, error)
	GetIncident(ctx context.Context, id int) (*model.Incident, error)
	// CreateIncidentFromInteraction handles the complete incident creation flow from a Slack interaction
	CreateIncidentFromInteraction(ctx context.Context, originChannelID, title, userID string) (*model.Incident, error)
	// HandleCreateIncidentAction handles the create incident button click action
	// This includes retrieving the request, creating the incident, and cleaning up
	HandleCreateIncidentAction(ctx context.Context, requestID, userID string) (*model.Incident, error)
	// HandleCreateIncidentActionAsync handles the create incident button click with async processing and error messaging
	HandleCreateIncidentActionAsync(ctx context.Context, requestID, userID, channelID string)
	// HandleCreateIncidentWithDetails handles the create incident with edited details from modal
	HandleCreateIncidentWithDetails(ctx context.Context, requestID, title, description, categoryID, userID string) (*model.Incident, error)
	// GetIncidentRequest retrieves an incident request by ID
	GetIncidentRequest(ctx context.Context, requestID string) (*model.IncidentRequest, error)
	// HandleEditIncidentAction handles the edit incident button click action
	// This includes retrieving the request, opening the modal, and error handling
	HandleEditIncidentAction(ctx context.Context, requestID, userID, triggerID string) error
}
