// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/secmon-lab/lycaon/pkg/domain/interfaces"
	"github.com/secmon-lab/lycaon/pkg/domain/model"
	"github.com/secmon-lab/lycaon/pkg/domain/types"
	"sync"
)

// Ensure, that RepositoryMock does implement interfaces.Repository.
// If this is not the case, regenerate this file with moq.
var _ interfaces.Repository = &RepositoryMock{}

// RepositoryMock is a mock implementation of interfaces.Repository.
//
//	func TestSomethingThatUsesRepository(t *testing.T) {
//
//		// make and configure a mocked interfaces.Repository
//		mockedRepository := &RepositoryMock{
//			CloseFunc: func() error {
//				panic("mock out the Close method")
//			},
//			CreateTaskFunc: func(ctx context.Context, task *model.Task) error {
//				panic("mock out the CreateTask method")
//			},
//			DeleteIncidentRequestFunc: func(ctx context.Context, id types.IncidentRequestID) error {
//				panic("mock out the DeleteIncidentRequest method")
//			},
//			DeleteSessionFunc: func(ctx context.Context, id types.SessionID) error {
//				panic("mock out the DeleteSession method")
//			},
//			DeleteTaskFunc: func(ctx context.Context, incidentID types.IncidentID, taskID types.TaskID) error {
//				panic("mock out the DeleteTask method")
//			},
//			GetIncidentFunc: func(ctx context.Context, id types.IncidentID) (*model.Incident, error) {
//				panic("mock out the GetIncident method")
//			},
//			GetIncidentByChannelIDFunc: func(ctx context.Context, channelID types.ChannelID) (*model.Incident, error) {
//				panic("mock out the GetIncidentByChannelID method")
//			},
//			GetIncidentRequestFunc: func(ctx context.Context, id types.IncidentRequestID) (*model.IncidentRequest, error) {
//				panic("mock out the GetIncidentRequest method")
//			},
//			GetMessageFunc: func(ctx context.Context, id types.MessageID) (*model.Message, error) {
//				panic("mock out the GetMessage method")
//			},
//			GetNextIncidentNumberFunc: func(ctx context.Context) (types.IncidentID, error) {
//				panic("mock out the GetNextIncidentNumber method")
//			},
//			GetSessionFunc: func(ctx context.Context, id types.SessionID) (*model.Session, error) {
//				panic("mock out the GetSession method")
//			},
//			GetTaskFunc: func(ctx context.Context, taskID types.TaskID) (*model.Task, error) {
//				panic("mock out the GetTask method")
//			},
//			GetTaskByIncidentFunc: func(ctx context.Context, incidentID types.IncidentID, taskID types.TaskID) (*model.Task, error) {
//				panic("mock out the GetTaskByIncident method")
//			},
//			GetUserFunc: func(ctx context.Context, id types.UserID) (*model.User, error) {
//				panic("mock out the GetUser method")
//			},
//			GetUserBySlackIDFunc: func(ctx context.Context, slackUserID types.SlackUserID) (*model.User, error) {
//				panic("mock out the GetUserBySlackID method")
//			},
//			ListIncidentsFunc: func(ctx context.Context) ([]*model.Incident, error) {
//				panic("mock out the ListIncidents method")
//			},
//			ListIncidentsPaginatedFunc: func(ctx context.Context, opts types.PaginationOptions) ([]*model.Incident, *types.PaginationResult, error) {
//				panic("mock out the ListIncidentsPaginated method")
//			},
//			ListMessagesFunc: func(ctx context.Context, channelID types.ChannelID, limit int) ([]*model.Message, error) {
//				panic("mock out the ListMessages method")
//			},
//			ListTasksByIncidentFunc: func(ctx context.Context, incidentID types.IncidentID) ([]*model.Task, error) {
//				panic("mock out the ListTasksByIncident method")
//			},
//			PutIncidentFunc: func(ctx context.Context, incident *model.Incident) error {
//				panic("mock out the PutIncident method")
//			},
//			SaveIncidentRequestFunc: func(ctx context.Context, request *model.IncidentRequest) error {
//				panic("mock out the SaveIncidentRequest method")
//			},
//			SaveMessageFunc: func(ctx context.Context, message *model.Message) error {
//				panic("mock out the SaveMessage method")
//			},
//			SaveSessionFunc: func(ctx context.Context, session *model.Session) error {
//				panic("mock out the SaveSession method")
//			},
//			SaveUserFunc: func(ctx context.Context, user *model.User) error {
//				panic("mock out the SaveUser method")
//			},
//			UpdateTaskFunc: func(ctx context.Context, task *model.Task) error {
//				panic("mock out the UpdateTask method")
//			},
//		}
//
//		// use mockedRepository in code that requires interfaces.Repository
//		// and then make assertions.
//
//	}
type RepositoryMock struct {
	// CloseFunc mocks the Close method.
	CloseFunc func() error

	// CreateTaskFunc mocks the CreateTask method.
	CreateTaskFunc func(ctx context.Context, task *model.Task) error

	// DeleteIncidentRequestFunc mocks the DeleteIncidentRequest method.
	DeleteIncidentRequestFunc func(ctx context.Context, id types.IncidentRequestID) error

	// DeleteSessionFunc mocks the DeleteSession method.
	DeleteSessionFunc func(ctx context.Context, id types.SessionID) error

	// DeleteTaskFunc mocks the DeleteTask method.
	DeleteTaskFunc func(ctx context.Context, incidentID types.IncidentID, taskID types.TaskID) error

	// GetIncidentFunc mocks the GetIncident method.
	GetIncidentFunc func(ctx context.Context, id types.IncidentID) (*model.Incident, error)

	// GetIncidentByChannelIDFunc mocks the GetIncidentByChannelID method.
	GetIncidentByChannelIDFunc func(ctx context.Context, channelID types.ChannelID) (*model.Incident, error)

	// GetIncidentRequestFunc mocks the GetIncidentRequest method.
	GetIncidentRequestFunc func(ctx context.Context, id types.IncidentRequestID) (*model.IncidentRequest, error)

	// GetMessageFunc mocks the GetMessage method.
	GetMessageFunc func(ctx context.Context, id types.MessageID) (*model.Message, error)

	// GetNextIncidentNumberFunc mocks the GetNextIncidentNumber method.
	GetNextIncidentNumberFunc func(ctx context.Context) (types.IncidentID, error)

	// GetSessionFunc mocks the GetSession method.
	GetSessionFunc func(ctx context.Context, id types.SessionID) (*model.Session, error)

	// GetTaskFunc mocks the GetTask method.
	GetTaskFunc func(ctx context.Context, taskID types.TaskID) (*model.Task, error)

	// GetTaskByIncidentFunc mocks the GetTaskByIncident method.
	GetTaskByIncidentFunc func(ctx context.Context, incidentID types.IncidentID, taskID types.TaskID) (*model.Task, error)

	// GetUserFunc mocks the GetUser method.
	GetUserFunc func(ctx context.Context, id types.UserID) (*model.User, error)

	// GetUserBySlackIDFunc mocks the GetUserBySlackID method.
	GetUserBySlackIDFunc func(ctx context.Context, slackUserID types.SlackUserID) (*model.User, error)

	// ListIncidentsFunc mocks the ListIncidents method.
	ListIncidentsFunc func(ctx context.Context) ([]*model.Incident, error)

	// ListIncidentsPaginatedFunc mocks the ListIncidentsPaginated method.
	ListIncidentsPaginatedFunc func(ctx context.Context, opts types.PaginationOptions) ([]*model.Incident, *types.PaginationResult, error)

	// ListMessagesFunc mocks the ListMessages method.
	ListMessagesFunc func(ctx context.Context, channelID types.ChannelID, limit int) ([]*model.Message, error)

	// ListTasksByIncidentFunc mocks the ListTasksByIncident method.
	ListTasksByIncidentFunc func(ctx context.Context, incidentID types.IncidentID) ([]*model.Task, error)

	// PutIncidentFunc mocks the PutIncident method.
	PutIncidentFunc func(ctx context.Context, incident *model.Incident) error

	// SaveIncidentRequestFunc mocks the SaveIncidentRequest method.
	SaveIncidentRequestFunc func(ctx context.Context, request *model.IncidentRequest) error

	// SaveMessageFunc mocks the SaveMessage method.
	SaveMessageFunc func(ctx context.Context, message *model.Message) error

	// SaveSessionFunc mocks the SaveSession method.
	SaveSessionFunc func(ctx context.Context, session *model.Session) error

	// SaveUserFunc mocks the SaveUser method.
	SaveUserFunc func(ctx context.Context, user *model.User) error

	// UpdateTaskFunc mocks the UpdateTask method.
	UpdateTaskFunc func(ctx context.Context, task *model.Task) error

	// calls tracks calls to the methods.
	calls struct {
		// Close holds details about calls to the Close method.
		Close []struct {
		}
		// CreateTask holds details about calls to the CreateTask method.
		CreateTask []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Task is the task argument value.
			Task *model.Task
		}
		// DeleteIncidentRequest holds details about calls to the DeleteIncidentRequest method.
		DeleteIncidentRequest []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID types.IncidentRequestID
		}
		// DeleteSession holds details about calls to the DeleteSession method.
		DeleteSession []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID types.SessionID
		}
		// DeleteTask holds details about calls to the DeleteTask method.
		DeleteTask []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// IncidentID is the incidentID argument value.
			IncidentID types.IncidentID
			// TaskID is the taskID argument value.
			TaskID types.TaskID
		}
		// GetIncident holds details about calls to the GetIncident method.
		GetIncident []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID types.IncidentID
		}
		// GetIncidentByChannelID holds details about calls to the GetIncidentByChannelID method.
		GetIncidentByChannelID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChannelID is the channelID argument value.
			ChannelID types.ChannelID
		}
		// GetIncidentRequest holds details about calls to the GetIncidentRequest method.
		GetIncidentRequest []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID types.IncidentRequestID
		}
		// GetMessage holds details about calls to the GetMessage method.
		GetMessage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID types.MessageID
		}
		// GetNextIncidentNumber holds details about calls to the GetNextIncidentNumber method.
		GetNextIncidentNumber []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetSession holds details about calls to the GetSession method.
		GetSession []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID types.SessionID
		}
		// GetTask holds details about calls to the GetTask method.
		GetTask []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// TaskID is the taskID argument value.
			TaskID types.TaskID
		}
		// GetTaskByIncident holds details about calls to the GetTaskByIncident method.
		GetTaskByIncident []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// IncidentID is the incidentID argument value.
			IncidentID types.IncidentID
			// TaskID is the taskID argument value.
			TaskID types.TaskID
		}
		// GetUser holds details about calls to the GetUser method.
		GetUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID types.UserID
		}
		// GetUserBySlackID holds details about calls to the GetUserBySlackID method.
		GetUserBySlackID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// SlackUserID is the slackUserID argument value.
			SlackUserID types.SlackUserID
		}
		// ListIncidents holds details about calls to the ListIncidents method.
		ListIncidents []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// ListIncidentsPaginated holds details about calls to the ListIncidentsPaginated method.
		ListIncidentsPaginated []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Opts is the opts argument value.
			Opts types.PaginationOptions
		}
		// ListMessages holds details about calls to the ListMessages method.
		ListMessages []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChannelID is the channelID argument value.
			ChannelID types.ChannelID
			// Limit is the limit argument value.
			Limit int
		}
		// ListTasksByIncident holds details about calls to the ListTasksByIncident method.
		ListTasksByIncident []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// IncidentID is the incidentID argument value.
			IncidentID types.IncidentID
		}
		// PutIncident holds details about calls to the PutIncident method.
		PutIncident []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Incident is the incident argument value.
			Incident *model.Incident
		}
		// SaveIncidentRequest holds details about calls to the SaveIncidentRequest method.
		SaveIncidentRequest []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Request is the request argument value.
			Request *model.IncidentRequest
		}
		// SaveMessage holds details about calls to the SaveMessage method.
		SaveMessage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Message is the message argument value.
			Message *model.Message
		}
		// SaveSession holds details about calls to the SaveSession method.
		SaveSession []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Session is the session argument value.
			Session *model.Session
		}
		// SaveUser holds details about calls to the SaveUser method.
		SaveUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// User is the user argument value.
			User *model.User
		}
		// UpdateTask holds details about calls to the UpdateTask method.
		UpdateTask []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Task is the task argument value.
			Task *model.Task
		}
	}
	lockClose                  sync.RWMutex
	lockCreateTask             sync.RWMutex
	lockDeleteIncidentRequest  sync.RWMutex
	lockDeleteSession          sync.RWMutex
	lockDeleteTask             sync.RWMutex
	lockGetIncident            sync.RWMutex
	lockGetIncidentByChannelID sync.RWMutex
	lockGetIncidentRequest     sync.RWMutex
	lockGetMessage             sync.RWMutex
	lockGetNextIncidentNumber  sync.RWMutex
	lockGetSession             sync.RWMutex
	lockGetTask                sync.RWMutex
	lockGetTaskByIncident      sync.RWMutex
	lockGetUser                sync.RWMutex
	lockGetUserBySlackID       sync.RWMutex
	lockListIncidents          sync.RWMutex
	lockListIncidentsPaginated sync.RWMutex
	lockListMessages           sync.RWMutex
	lockListTasksByIncident    sync.RWMutex
	lockPutIncident            sync.RWMutex
	lockSaveIncidentRequest    sync.RWMutex
	lockSaveMessage            sync.RWMutex
	lockSaveSession            sync.RWMutex
	lockSaveUser               sync.RWMutex
	lockUpdateTask             sync.RWMutex
}

// Close calls CloseFunc.
func (mock *RepositoryMock) Close() error {
	if mock.CloseFunc == nil {
		panic("RepositoryMock.CloseFunc: method is nil but Repository.Close was just called")
	}
	callInfo := struct {
	}{}
	mock.lockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	mock.lockClose.Unlock()
	return mock.CloseFunc()
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//
//	len(mockedRepository.CloseCalls())
func (mock *RepositoryMock) CloseCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockClose.RLock()
	calls = mock.calls.Close
	mock.lockClose.RUnlock()
	return calls
}

// CreateTask calls CreateTaskFunc.
func (mock *RepositoryMock) CreateTask(ctx context.Context, task *model.Task) error {
	if mock.CreateTaskFunc == nil {
		panic("RepositoryMock.CreateTaskFunc: method is nil but Repository.CreateTask was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Task *model.Task
	}{
		Ctx:  ctx,
		Task: task,
	}
	mock.lockCreateTask.Lock()
	mock.calls.CreateTask = append(mock.calls.CreateTask, callInfo)
	mock.lockCreateTask.Unlock()
	return mock.CreateTaskFunc(ctx, task)
}

// CreateTaskCalls gets all the calls that were made to CreateTask.
// Check the length with:
//
//	len(mockedRepository.CreateTaskCalls())
func (mock *RepositoryMock) CreateTaskCalls() []struct {
	Ctx  context.Context
	Task *model.Task
} {
	var calls []struct {
		Ctx  context.Context
		Task *model.Task
	}
	mock.lockCreateTask.RLock()
	calls = mock.calls.CreateTask
	mock.lockCreateTask.RUnlock()
	return calls
}

// DeleteIncidentRequest calls DeleteIncidentRequestFunc.
func (mock *RepositoryMock) DeleteIncidentRequest(ctx context.Context, id types.IncidentRequestID) error {
	if mock.DeleteIncidentRequestFunc == nil {
		panic("RepositoryMock.DeleteIncidentRequestFunc: method is nil but Repository.DeleteIncidentRequest was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  types.IncidentRequestID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDeleteIncidentRequest.Lock()
	mock.calls.DeleteIncidentRequest = append(mock.calls.DeleteIncidentRequest, callInfo)
	mock.lockDeleteIncidentRequest.Unlock()
	return mock.DeleteIncidentRequestFunc(ctx, id)
}

// DeleteIncidentRequestCalls gets all the calls that were made to DeleteIncidentRequest.
// Check the length with:
//
//	len(mockedRepository.DeleteIncidentRequestCalls())
func (mock *RepositoryMock) DeleteIncidentRequestCalls() []struct {
	Ctx context.Context
	ID  types.IncidentRequestID
} {
	var calls []struct {
		Ctx context.Context
		ID  types.IncidentRequestID
	}
	mock.lockDeleteIncidentRequest.RLock()
	calls = mock.calls.DeleteIncidentRequest
	mock.lockDeleteIncidentRequest.RUnlock()
	return calls
}

// DeleteSession calls DeleteSessionFunc.
func (mock *RepositoryMock) DeleteSession(ctx context.Context, id types.SessionID) error {
	if mock.DeleteSessionFunc == nil {
		panic("RepositoryMock.DeleteSessionFunc: method is nil but Repository.DeleteSession was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  types.SessionID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDeleteSession.Lock()
	mock.calls.DeleteSession = append(mock.calls.DeleteSession, callInfo)
	mock.lockDeleteSession.Unlock()
	return mock.DeleteSessionFunc(ctx, id)
}

// DeleteSessionCalls gets all the calls that were made to DeleteSession.
// Check the length with:
//
//	len(mockedRepository.DeleteSessionCalls())
func (mock *RepositoryMock) DeleteSessionCalls() []struct {
	Ctx context.Context
	ID  types.SessionID
} {
	var calls []struct {
		Ctx context.Context
		ID  types.SessionID
	}
	mock.lockDeleteSession.RLock()
	calls = mock.calls.DeleteSession
	mock.lockDeleteSession.RUnlock()
	return calls
}

// DeleteTask calls DeleteTaskFunc.
func (mock *RepositoryMock) DeleteTask(ctx context.Context, incidentID types.IncidentID, taskID types.TaskID) error {
	if mock.DeleteTaskFunc == nil {
		panic("RepositoryMock.DeleteTaskFunc: method is nil but Repository.DeleteTask was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		IncidentID types.IncidentID
		TaskID     types.TaskID
	}{
		Ctx:        ctx,
		IncidentID: incidentID,
		TaskID:     taskID,
	}
	mock.lockDeleteTask.Lock()
	mock.calls.DeleteTask = append(mock.calls.DeleteTask, callInfo)
	mock.lockDeleteTask.Unlock()
	return mock.DeleteTaskFunc(ctx, incidentID, taskID)
}

// DeleteTaskCalls gets all the calls that were made to DeleteTask.
// Check the length with:
//
//	len(mockedRepository.DeleteTaskCalls())
func (mock *RepositoryMock) DeleteTaskCalls() []struct {
	Ctx        context.Context
	IncidentID types.IncidentID
	TaskID     types.TaskID
} {
	var calls []struct {
		Ctx        context.Context
		IncidentID types.IncidentID
		TaskID     types.TaskID
	}
	mock.lockDeleteTask.RLock()
	calls = mock.calls.DeleteTask
	mock.lockDeleteTask.RUnlock()
	return calls
}

// GetIncident calls GetIncidentFunc.
func (mock *RepositoryMock) GetIncident(ctx context.Context, id types.IncidentID) (*model.Incident, error) {
	if mock.GetIncidentFunc == nil {
		panic("RepositoryMock.GetIncidentFunc: method is nil but Repository.GetIncident was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  types.IncidentID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetIncident.Lock()
	mock.calls.GetIncident = append(mock.calls.GetIncident, callInfo)
	mock.lockGetIncident.Unlock()
	return mock.GetIncidentFunc(ctx, id)
}

// GetIncidentCalls gets all the calls that were made to GetIncident.
// Check the length with:
//
//	len(mockedRepository.GetIncidentCalls())
func (mock *RepositoryMock) GetIncidentCalls() []struct {
	Ctx context.Context
	ID  types.IncidentID
} {
	var calls []struct {
		Ctx context.Context
		ID  types.IncidentID
	}
	mock.lockGetIncident.RLock()
	calls = mock.calls.GetIncident
	mock.lockGetIncident.RUnlock()
	return calls
}

// GetIncidentByChannelID calls GetIncidentByChannelIDFunc.
func (mock *RepositoryMock) GetIncidentByChannelID(ctx context.Context, channelID types.ChannelID) (*model.Incident, error) {
	if mock.GetIncidentByChannelIDFunc == nil {
		panic("RepositoryMock.GetIncidentByChannelIDFunc: method is nil but Repository.GetIncidentByChannelID was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		ChannelID types.ChannelID
	}{
		Ctx:       ctx,
		ChannelID: channelID,
	}
	mock.lockGetIncidentByChannelID.Lock()
	mock.calls.GetIncidentByChannelID = append(mock.calls.GetIncidentByChannelID, callInfo)
	mock.lockGetIncidentByChannelID.Unlock()
	return mock.GetIncidentByChannelIDFunc(ctx, channelID)
}

// GetIncidentByChannelIDCalls gets all the calls that were made to GetIncidentByChannelID.
// Check the length with:
//
//	len(mockedRepository.GetIncidentByChannelIDCalls())
func (mock *RepositoryMock) GetIncidentByChannelIDCalls() []struct {
	Ctx       context.Context
	ChannelID types.ChannelID
} {
	var calls []struct {
		Ctx       context.Context
		ChannelID types.ChannelID
	}
	mock.lockGetIncidentByChannelID.RLock()
	calls = mock.calls.GetIncidentByChannelID
	mock.lockGetIncidentByChannelID.RUnlock()
	return calls
}

// GetIncidentRequest calls GetIncidentRequestFunc.
func (mock *RepositoryMock) GetIncidentRequest(ctx context.Context, id types.IncidentRequestID) (*model.IncidentRequest, error) {
	if mock.GetIncidentRequestFunc == nil {
		panic("RepositoryMock.GetIncidentRequestFunc: method is nil but Repository.GetIncidentRequest was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  types.IncidentRequestID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetIncidentRequest.Lock()
	mock.calls.GetIncidentRequest = append(mock.calls.GetIncidentRequest, callInfo)
	mock.lockGetIncidentRequest.Unlock()
	return mock.GetIncidentRequestFunc(ctx, id)
}

// GetIncidentRequestCalls gets all the calls that were made to GetIncidentRequest.
// Check the length with:
//
//	len(mockedRepository.GetIncidentRequestCalls())
func (mock *RepositoryMock) GetIncidentRequestCalls() []struct {
	Ctx context.Context
	ID  types.IncidentRequestID
} {
	var calls []struct {
		Ctx context.Context
		ID  types.IncidentRequestID
	}
	mock.lockGetIncidentRequest.RLock()
	calls = mock.calls.GetIncidentRequest
	mock.lockGetIncidentRequest.RUnlock()
	return calls
}

// GetMessage calls GetMessageFunc.
func (mock *RepositoryMock) GetMessage(ctx context.Context, id types.MessageID) (*model.Message, error) {
	if mock.GetMessageFunc == nil {
		panic("RepositoryMock.GetMessageFunc: method is nil but Repository.GetMessage was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  types.MessageID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetMessage.Lock()
	mock.calls.GetMessage = append(mock.calls.GetMessage, callInfo)
	mock.lockGetMessage.Unlock()
	return mock.GetMessageFunc(ctx, id)
}

// GetMessageCalls gets all the calls that were made to GetMessage.
// Check the length with:
//
//	len(mockedRepository.GetMessageCalls())
func (mock *RepositoryMock) GetMessageCalls() []struct {
	Ctx context.Context
	ID  types.MessageID
} {
	var calls []struct {
		Ctx context.Context
		ID  types.MessageID
	}
	mock.lockGetMessage.RLock()
	calls = mock.calls.GetMessage
	mock.lockGetMessage.RUnlock()
	return calls
}

// GetNextIncidentNumber calls GetNextIncidentNumberFunc.
func (mock *RepositoryMock) GetNextIncidentNumber(ctx context.Context) (types.IncidentID, error) {
	if mock.GetNextIncidentNumberFunc == nil {
		panic("RepositoryMock.GetNextIncidentNumberFunc: method is nil but Repository.GetNextIncidentNumber was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetNextIncidentNumber.Lock()
	mock.calls.GetNextIncidentNumber = append(mock.calls.GetNextIncidentNumber, callInfo)
	mock.lockGetNextIncidentNumber.Unlock()
	return mock.GetNextIncidentNumberFunc(ctx)
}

// GetNextIncidentNumberCalls gets all the calls that were made to GetNextIncidentNumber.
// Check the length with:
//
//	len(mockedRepository.GetNextIncidentNumberCalls())
func (mock *RepositoryMock) GetNextIncidentNumberCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetNextIncidentNumber.RLock()
	calls = mock.calls.GetNextIncidentNumber
	mock.lockGetNextIncidentNumber.RUnlock()
	return calls
}

// GetSession calls GetSessionFunc.
func (mock *RepositoryMock) GetSession(ctx context.Context, id types.SessionID) (*model.Session, error) {
	if mock.GetSessionFunc == nil {
		panic("RepositoryMock.GetSessionFunc: method is nil but Repository.GetSession was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  types.SessionID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetSession.Lock()
	mock.calls.GetSession = append(mock.calls.GetSession, callInfo)
	mock.lockGetSession.Unlock()
	return mock.GetSessionFunc(ctx, id)
}

// GetSessionCalls gets all the calls that were made to GetSession.
// Check the length with:
//
//	len(mockedRepository.GetSessionCalls())
func (mock *RepositoryMock) GetSessionCalls() []struct {
	Ctx context.Context
	ID  types.SessionID
} {
	var calls []struct {
		Ctx context.Context
		ID  types.SessionID
	}
	mock.lockGetSession.RLock()
	calls = mock.calls.GetSession
	mock.lockGetSession.RUnlock()
	return calls
}

// GetTask calls GetTaskFunc.
func (mock *RepositoryMock) GetTask(ctx context.Context, taskID types.TaskID) (*model.Task, error) {
	if mock.GetTaskFunc == nil {
		panic("RepositoryMock.GetTaskFunc: method is nil but Repository.GetTask was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		TaskID types.TaskID
	}{
		Ctx:    ctx,
		TaskID: taskID,
	}
	mock.lockGetTask.Lock()
	mock.calls.GetTask = append(mock.calls.GetTask, callInfo)
	mock.lockGetTask.Unlock()
	return mock.GetTaskFunc(ctx, taskID)
}

// GetTaskCalls gets all the calls that were made to GetTask.
// Check the length with:
//
//	len(mockedRepository.GetTaskCalls())
func (mock *RepositoryMock) GetTaskCalls() []struct {
	Ctx    context.Context
	TaskID types.TaskID
} {
	var calls []struct {
		Ctx    context.Context
		TaskID types.TaskID
	}
	mock.lockGetTask.RLock()
	calls = mock.calls.GetTask
	mock.lockGetTask.RUnlock()
	return calls
}

// GetTaskByIncident calls GetTaskByIncidentFunc.
func (mock *RepositoryMock) GetTaskByIncident(ctx context.Context, incidentID types.IncidentID, taskID types.TaskID) (*model.Task, error) {
	if mock.GetTaskByIncidentFunc == nil {
		panic("RepositoryMock.GetTaskByIncidentFunc: method is nil but Repository.GetTaskByIncident was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		IncidentID types.IncidentID
		TaskID     types.TaskID
	}{
		Ctx:        ctx,
		IncidentID: incidentID,
		TaskID:     taskID,
	}
	mock.lockGetTaskByIncident.Lock()
	mock.calls.GetTaskByIncident = append(mock.calls.GetTaskByIncident, callInfo)
	mock.lockGetTaskByIncident.Unlock()
	return mock.GetTaskByIncidentFunc(ctx, incidentID, taskID)
}

// GetTaskByIncidentCalls gets all the calls that were made to GetTaskByIncident.
// Check the length with:
//
//	len(mockedRepository.GetTaskByIncidentCalls())
func (mock *RepositoryMock) GetTaskByIncidentCalls() []struct {
	Ctx        context.Context
	IncidentID types.IncidentID
	TaskID     types.TaskID
} {
	var calls []struct {
		Ctx        context.Context
		IncidentID types.IncidentID
		TaskID     types.TaskID
	}
	mock.lockGetTaskByIncident.RLock()
	calls = mock.calls.GetTaskByIncident
	mock.lockGetTaskByIncident.RUnlock()
	return calls
}

// GetUser calls GetUserFunc.
func (mock *RepositoryMock) GetUser(ctx context.Context, id types.UserID) (*model.User, error) {
	if mock.GetUserFunc == nil {
		panic("RepositoryMock.GetUserFunc: method is nil but Repository.GetUser was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  types.UserID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetUser.Lock()
	mock.calls.GetUser = append(mock.calls.GetUser, callInfo)
	mock.lockGetUser.Unlock()
	return mock.GetUserFunc(ctx, id)
}

// GetUserCalls gets all the calls that were made to GetUser.
// Check the length with:
//
//	len(mockedRepository.GetUserCalls())
func (mock *RepositoryMock) GetUserCalls() []struct {
	Ctx context.Context
	ID  types.UserID
} {
	var calls []struct {
		Ctx context.Context
		ID  types.UserID
	}
	mock.lockGetUser.RLock()
	calls = mock.calls.GetUser
	mock.lockGetUser.RUnlock()
	return calls
}

// GetUserBySlackID calls GetUserBySlackIDFunc.
func (mock *RepositoryMock) GetUserBySlackID(ctx context.Context, slackUserID types.SlackUserID) (*model.User, error) {
	if mock.GetUserBySlackIDFunc == nil {
		panic("RepositoryMock.GetUserBySlackIDFunc: method is nil but Repository.GetUserBySlackID was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		SlackUserID types.SlackUserID
	}{
		Ctx:         ctx,
		SlackUserID: slackUserID,
	}
	mock.lockGetUserBySlackID.Lock()
	mock.calls.GetUserBySlackID = append(mock.calls.GetUserBySlackID, callInfo)
	mock.lockGetUserBySlackID.Unlock()
	return mock.GetUserBySlackIDFunc(ctx, slackUserID)
}

// GetUserBySlackIDCalls gets all the calls that were made to GetUserBySlackID.
// Check the length with:
//
//	len(mockedRepository.GetUserBySlackIDCalls())
func (mock *RepositoryMock) GetUserBySlackIDCalls() []struct {
	Ctx         context.Context
	SlackUserID types.SlackUserID
} {
	var calls []struct {
		Ctx         context.Context
		SlackUserID types.SlackUserID
	}
	mock.lockGetUserBySlackID.RLock()
	calls = mock.calls.GetUserBySlackID
	mock.lockGetUserBySlackID.RUnlock()
	return calls
}

// ListIncidents calls ListIncidentsFunc.
func (mock *RepositoryMock) ListIncidents(ctx context.Context) ([]*model.Incident, error) {
	if mock.ListIncidentsFunc == nil {
		panic("RepositoryMock.ListIncidentsFunc: method is nil but Repository.ListIncidents was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockListIncidents.Lock()
	mock.calls.ListIncidents = append(mock.calls.ListIncidents, callInfo)
	mock.lockListIncidents.Unlock()
	return mock.ListIncidentsFunc(ctx)
}

// ListIncidentsCalls gets all the calls that were made to ListIncidents.
// Check the length with:
//
//	len(mockedRepository.ListIncidentsCalls())
func (mock *RepositoryMock) ListIncidentsCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockListIncidents.RLock()
	calls = mock.calls.ListIncidents
	mock.lockListIncidents.RUnlock()
	return calls
}

// ListIncidentsPaginated calls ListIncidentsPaginatedFunc.
func (mock *RepositoryMock) ListIncidentsPaginated(ctx context.Context, opts types.PaginationOptions) ([]*model.Incident, *types.PaginationResult, error) {
	if mock.ListIncidentsPaginatedFunc == nil {
		panic("RepositoryMock.ListIncidentsPaginatedFunc: method is nil but Repository.ListIncidentsPaginated was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Opts types.PaginationOptions
	}{
		Ctx:  ctx,
		Opts: opts,
	}
	mock.lockListIncidentsPaginated.Lock()
	mock.calls.ListIncidentsPaginated = append(mock.calls.ListIncidentsPaginated, callInfo)
	mock.lockListIncidentsPaginated.Unlock()
	return mock.ListIncidentsPaginatedFunc(ctx, opts)
}

// ListIncidentsPaginatedCalls gets all the calls that were made to ListIncidentsPaginated.
// Check the length with:
//
//	len(mockedRepository.ListIncidentsPaginatedCalls())
func (mock *RepositoryMock) ListIncidentsPaginatedCalls() []struct {
	Ctx  context.Context
	Opts types.PaginationOptions
} {
	var calls []struct {
		Ctx  context.Context
		Opts types.PaginationOptions
	}
	mock.lockListIncidentsPaginated.RLock()
	calls = mock.calls.ListIncidentsPaginated
	mock.lockListIncidentsPaginated.RUnlock()
	return calls
}

// ListMessages calls ListMessagesFunc.
func (mock *RepositoryMock) ListMessages(ctx context.Context, channelID types.ChannelID, limit int) ([]*model.Message, error) {
	if mock.ListMessagesFunc == nil {
		panic("RepositoryMock.ListMessagesFunc: method is nil but Repository.ListMessages was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		ChannelID types.ChannelID
		Limit     int
	}{
		Ctx:       ctx,
		ChannelID: channelID,
		Limit:     limit,
	}
	mock.lockListMessages.Lock()
	mock.calls.ListMessages = append(mock.calls.ListMessages, callInfo)
	mock.lockListMessages.Unlock()
	return mock.ListMessagesFunc(ctx, channelID, limit)
}

// ListMessagesCalls gets all the calls that were made to ListMessages.
// Check the length with:
//
//	len(mockedRepository.ListMessagesCalls())
func (mock *RepositoryMock) ListMessagesCalls() []struct {
	Ctx       context.Context
	ChannelID types.ChannelID
	Limit     int
} {
	var calls []struct {
		Ctx       context.Context
		ChannelID types.ChannelID
		Limit     int
	}
	mock.lockListMessages.RLock()
	calls = mock.calls.ListMessages
	mock.lockListMessages.RUnlock()
	return calls
}

// ListTasksByIncident calls ListTasksByIncidentFunc.
func (mock *RepositoryMock) ListTasksByIncident(ctx context.Context, incidentID types.IncidentID) ([]*model.Task, error) {
	if mock.ListTasksByIncidentFunc == nil {
		panic("RepositoryMock.ListTasksByIncidentFunc: method is nil but Repository.ListTasksByIncident was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		IncidentID types.IncidentID
	}{
		Ctx:        ctx,
		IncidentID: incidentID,
	}
	mock.lockListTasksByIncident.Lock()
	mock.calls.ListTasksByIncident = append(mock.calls.ListTasksByIncident, callInfo)
	mock.lockListTasksByIncident.Unlock()
	return mock.ListTasksByIncidentFunc(ctx, incidentID)
}

// ListTasksByIncidentCalls gets all the calls that were made to ListTasksByIncident.
// Check the length with:
//
//	len(mockedRepository.ListTasksByIncidentCalls())
func (mock *RepositoryMock) ListTasksByIncidentCalls() []struct {
	Ctx        context.Context
	IncidentID types.IncidentID
} {
	var calls []struct {
		Ctx        context.Context
		IncidentID types.IncidentID
	}
	mock.lockListTasksByIncident.RLock()
	calls = mock.calls.ListTasksByIncident
	mock.lockListTasksByIncident.RUnlock()
	return calls
}

// PutIncident calls PutIncidentFunc.
func (mock *RepositoryMock) PutIncident(ctx context.Context, incident *model.Incident) error {
	if mock.PutIncidentFunc == nil {
		panic("RepositoryMock.PutIncidentFunc: method is nil but Repository.PutIncident was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Incident *model.Incident
	}{
		Ctx:      ctx,
		Incident: incident,
	}
	mock.lockPutIncident.Lock()
	mock.calls.PutIncident = append(mock.calls.PutIncident, callInfo)
	mock.lockPutIncident.Unlock()
	return mock.PutIncidentFunc(ctx, incident)
}

// PutIncidentCalls gets all the calls that were made to PutIncident.
// Check the length with:
//
//	len(mockedRepository.PutIncidentCalls())
func (mock *RepositoryMock) PutIncidentCalls() []struct {
	Ctx      context.Context
	Incident *model.Incident
} {
	var calls []struct {
		Ctx      context.Context
		Incident *model.Incident
	}
	mock.lockPutIncident.RLock()
	calls = mock.calls.PutIncident
	mock.lockPutIncident.RUnlock()
	return calls
}

// SaveIncidentRequest calls SaveIncidentRequestFunc.
func (mock *RepositoryMock) SaveIncidentRequest(ctx context.Context, request *model.IncidentRequest) error {
	if mock.SaveIncidentRequestFunc == nil {
		panic("RepositoryMock.SaveIncidentRequestFunc: method is nil but Repository.SaveIncidentRequest was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Request *model.IncidentRequest
	}{
		Ctx:     ctx,
		Request: request,
	}
	mock.lockSaveIncidentRequest.Lock()
	mock.calls.SaveIncidentRequest = append(mock.calls.SaveIncidentRequest, callInfo)
	mock.lockSaveIncidentRequest.Unlock()
	return mock.SaveIncidentRequestFunc(ctx, request)
}

// SaveIncidentRequestCalls gets all the calls that were made to SaveIncidentRequest.
// Check the length with:
//
//	len(mockedRepository.SaveIncidentRequestCalls())
func (mock *RepositoryMock) SaveIncidentRequestCalls() []struct {
	Ctx     context.Context
	Request *model.IncidentRequest
} {
	var calls []struct {
		Ctx     context.Context
		Request *model.IncidentRequest
	}
	mock.lockSaveIncidentRequest.RLock()
	calls = mock.calls.SaveIncidentRequest
	mock.lockSaveIncidentRequest.RUnlock()
	return calls
}

// SaveMessage calls SaveMessageFunc.
func (mock *RepositoryMock) SaveMessage(ctx context.Context, message *model.Message) error {
	if mock.SaveMessageFunc == nil {
		panic("RepositoryMock.SaveMessageFunc: method is nil but Repository.SaveMessage was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Message *model.Message
	}{
		Ctx:     ctx,
		Message: message,
	}
	mock.lockSaveMessage.Lock()
	mock.calls.SaveMessage = append(mock.calls.SaveMessage, callInfo)
	mock.lockSaveMessage.Unlock()
	return mock.SaveMessageFunc(ctx, message)
}

// SaveMessageCalls gets all the calls that were made to SaveMessage.
// Check the length with:
//
//	len(mockedRepository.SaveMessageCalls())
func (mock *RepositoryMock) SaveMessageCalls() []struct {
	Ctx     context.Context
	Message *model.Message
} {
	var calls []struct {
		Ctx     context.Context
		Message *model.Message
	}
	mock.lockSaveMessage.RLock()
	calls = mock.calls.SaveMessage
	mock.lockSaveMessage.RUnlock()
	return calls
}

// SaveSession calls SaveSessionFunc.
func (mock *RepositoryMock) SaveSession(ctx context.Context, session *model.Session) error {
	if mock.SaveSessionFunc == nil {
		panic("RepositoryMock.SaveSessionFunc: method is nil but Repository.SaveSession was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Session *model.Session
	}{
		Ctx:     ctx,
		Session: session,
	}
	mock.lockSaveSession.Lock()
	mock.calls.SaveSession = append(mock.calls.SaveSession, callInfo)
	mock.lockSaveSession.Unlock()
	return mock.SaveSessionFunc(ctx, session)
}

// SaveSessionCalls gets all the calls that were made to SaveSession.
// Check the length with:
//
//	len(mockedRepository.SaveSessionCalls())
func (mock *RepositoryMock) SaveSessionCalls() []struct {
	Ctx     context.Context
	Session *model.Session
} {
	var calls []struct {
		Ctx     context.Context
		Session *model.Session
	}
	mock.lockSaveSession.RLock()
	calls = mock.calls.SaveSession
	mock.lockSaveSession.RUnlock()
	return calls
}

// SaveUser calls SaveUserFunc.
func (mock *RepositoryMock) SaveUser(ctx context.Context, user *model.User) error {
	if mock.SaveUserFunc == nil {
		panic("RepositoryMock.SaveUserFunc: method is nil but Repository.SaveUser was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		User *model.User
	}{
		Ctx:  ctx,
		User: user,
	}
	mock.lockSaveUser.Lock()
	mock.calls.SaveUser = append(mock.calls.SaveUser, callInfo)
	mock.lockSaveUser.Unlock()
	return mock.SaveUserFunc(ctx, user)
}

// SaveUserCalls gets all the calls that were made to SaveUser.
// Check the length with:
//
//	len(mockedRepository.SaveUserCalls())
func (mock *RepositoryMock) SaveUserCalls() []struct {
	Ctx  context.Context
	User *model.User
} {
	var calls []struct {
		Ctx  context.Context
		User *model.User
	}
	mock.lockSaveUser.RLock()
	calls = mock.calls.SaveUser
	mock.lockSaveUser.RUnlock()
	return calls
}

// UpdateTask calls UpdateTaskFunc.
func (mock *RepositoryMock) UpdateTask(ctx context.Context, task *model.Task) error {
	if mock.UpdateTaskFunc == nil {
		panic("RepositoryMock.UpdateTaskFunc: method is nil but Repository.UpdateTask was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Task *model.Task
	}{
		Ctx:  ctx,
		Task: task,
	}
	mock.lockUpdateTask.Lock()
	mock.calls.UpdateTask = append(mock.calls.UpdateTask, callInfo)
	mock.lockUpdateTask.Unlock()
	return mock.UpdateTaskFunc(ctx, task)
}

// UpdateTaskCalls gets all the calls that were made to UpdateTask.
// Check the length with:
//
//	len(mockedRepository.UpdateTaskCalls())
func (mock *RepositoryMock) UpdateTaskCalls() []struct {
	Ctx  context.Context
	Task *model.Task
} {
	var calls []struct {
		Ctx  context.Context
		Task *model.Task
	}
	mock.lockUpdateTask.RLock()
	calls = mock.calls.UpdateTask
	mock.lockUpdateTask.RUnlock()
	return calls
}
