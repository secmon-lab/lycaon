// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/secmon-lab/lycaon/pkg/domain/interfaces"
	"github.com/slack-go/slack"
	"sync"
)

// Ensure, that SlackClientMock does implement interfaces.SlackClient.
// If this is not the case, regenerate this file with moq.
var _ interfaces.SlackClient = &SlackClientMock{}

// SlackClientMock is a mock implementation of interfaces.SlackClient.
//
//	func TestSomethingThatUsesSlackClient(t *testing.T) {
//
//		// make and configure a mocked interfaces.SlackClient
//		mockedSlackClient := &SlackClientMock{
//			AuthTestContextFunc: func(ctx context.Context) (*slack.AuthTestResponse, error) {
//				panic("mock out the AuthTestContext method")
//			},
//			CreateConversationFunc: func(ctx context.Context, params slack.CreateConversationParams) (*slack.Channel, error) {
//				panic("mock out the CreateConversation method")
//			},
//			GetConversationHistoryContextFunc: func(ctx context.Context, params *slack.GetConversationHistoryParameters) (*slack.GetConversationHistoryResponse, error) {
//				panic("mock out the GetConversationHistoryContext method")
//			},
//			GetConversationInfoFunc: func(ctx context.Context, channelID string, includeLocale bool) (*slack.Channel, error) {
//				panic("mock out the GetConversationInfo method")
//			},
//			GetConversationRepliesContextFunc: func(ctx context.Context, params *slack.GetConversationRepliesParameters) ([]slack.Message, bool, bool, error) {
//				panic("mock out the GetConversationRepliesContext method")
//			},
//			InviteUsersToConversationFunc: func(ctx context.Context, channelID string, users ...string) (*slack.Channel, error) {
//				panic("mock out the InviteUsersToConversation method")
//			},
//			OpenViewFunc: func(ctx context.Context, triggerID string, view slack.ModalViewRequest) (*slack.ViewResponse, error) {
//				panic("mock out the OpenView method")
//			},
//			PostMessageFunc: func(ctx context.Context, channelID string, options ...slack.MsgOption) (string, string, error) {
//				panic("mock out the PostMessage method")
//			},
//			SendContextMessageFunc: func(ctx context.Context, channelID string, messageTS string, contextText string) string {
//				panic("mock out the SendContextMessage method")
//			},
//			SetPurposeOfConversationContextFunc: func(ctx context.Context, channelID string, purpose string) (*slack.Channel, error) {
//				panic("mock out the SetPurposeOfConversationContext method")
//			},
//			UpdateMessageFunc: func(ctx context.Context, channelID string, timestamp string, options ...slack.MsgOption) (string, string, string, error) {
//				panic("mock out the UpdateMessage method")
//			},
//		}
//
//		// use mockedSlackClient in code that requires interfaces.SlackClient
//		// and then make assertions.
//
//	}
type SlackClientMock struct {
	// AuthTestContextFunc mocks the AuthTestContext method.
	AuthTestContextFunc func(ctx context.Context) (*slack.AuthTestResponse, error)

	// CreateConversationFunc mocks the CreateConversation method.
	CreateConversationFunc func(ctx context.Context, params slack.CreateConversationParams) (*slack.Channel, error)

	// GetConversationHistoryContextFunc mocks the GetConversationHistoryContext method.
	GetConversationHistoryContextFunc func(ctx context.Context, params *slack.GetConversationHistoryParameters) (*slack.GetConversationHistoryResponse, error)

	// GetConversationInfoFunc mocks the GetConversationInfo method.
	GetConversationInfoFunc func(ctx context.Context, channelID string, includeLocale bool) (*slack.Channel, error)

	// GetConversationRepliesContextFunc mocks the GetConversationRepliesContext method.
	GetConversationRepliesContextFunc func(ctx context.Context, params *slack.GetConversationRepliesParameters) ([]slack.Message, bool, bool, error)

	// InviteUsersToConversationFunc mocks the InviteUsersToConversation method.
	InviteUsersToConversationFunc func(ctx context.Context, channelID string, users ...string) (*slack.Channel, error)

	// OpenViewFunc mocks the OpenView method.
	OpenViewFunc func(ctx context.Context, triggerID string, view slack.ModalViewRequest) (*slack.ViewResponse, error)

	// PostMessageFunc mocks the PostMessage method.
	PostMessageFunc func(ctx context.Context, channelID string, options ...slack.MsgOption) (string, string, error)

	// SendContextMessageFunc mocks the SendContextMessage method.
	SendContextMessageFunc func(ctx context.Context, channelID string, messageTS string, contextText string) string

	// SetPurposeOfConversationContextFunc mocks the SetPurposeOfConversationContext method.
	SetPurposeOfConversationContextFunc func(ctx context.Context, channelID string, purpose string) (*slack.Channel, error)

	// UpdateMessageFunc mocks the UpdateMessage method.
	UpdateMessageFunc func(ctx context.Context, channelID string, timestamp string, options ...slack.MsgOption) (string, string, string, error)

	// calls tracks calls to the methods.
	calls struct {
		// AuthTestContext holds details about calls to the AuthTestContext method.
		AuthTestContext []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// CreateConversation holds details about calls to the CreateConversation method.
		CreateConversation []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params slack.CreateConversationParams
		}
		// GetConversationHistoryContext holds details about calls to the GetConversationHistoryContext method.
		GetConversationHistoryContext []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *slack.GetConversationHistoryParameters
		}
		// GetConversationInfo holds details about calls to the GetConversationInfo method.
		GetConversationInfo []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChannelID is the channelID argument value.
			ChannelID string
			// IncludeLocale is the includeLocale argument value.
			IncludeLocale bool
		}
		// GetConversationRepliesContext holds details about calls to the GetConversationRepliesContext method.
		GetConversationRepliesContext []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *slack.GetConversationRepliesParameters
		}
		// InviteUsersToConversation holds details about calls to the InviteUsersToConversation method.
		InviteUsersToConversation []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChannelID is the channelID argument value.
			ChannelID string
			// Users is the users argument value.
			Users []string
		}
		// OpenView holds details about calls to the OpenView method.
		OpenView []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// TriggerID is the triggerID argument value.
			TriggerID string
			// View is the view argument value.
			View slack.ModalViewRequest
		}
		// PostMessage holds details about calls to the PostMessage method.
		PostMessage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChannelID is the channelID argument value.
			ChannelID string
			// Options is the options argument value.
			Options []slack.MsgOption
		}
		// SendContextMessage holds details about calls to the SendContextMessage method.
		SendContextMessage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChannelID is the channelID argument value.
			ChannelID string
			// MessageTS is the messageTS argument value.
			MessageTS string
			// ContextText is the contextText argument value.
			ContextText string
		}
		// SetPurposeOfConversationContext holds details about calls to the SetPurposeOfConversationContext method.
		SetPurposeOfConversationContext []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChannelID is the channelID argument value.
			ChannelID string
			// Purpose is the purpose argument value.
			Purpose string
		}
		// UpdateMessage holds details about calls to the UpdateMessage method.
		UpdateMessage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChannelID is the channelID argument value.
			ChannelID string
			// Timestamp is the timestamp argument value.
			Timestamp string
			// Options is the options argument value.
			Options []slack.MsgOption
		}
	}
	lockAuthTestContext                 sync.RWMutex
	lockCreateConversation              sync.RWMutex
	lockGetConversationHistoryContext   sync.RWMutex
	lockGetConversationInfo             sync.RWMutex
	lockGetConversationRepliesContext   sync.RWMutex
	lockInviteUsersToConversation       sync.RWMutex
	lockOpenView                        sync.RWMutex
	lockPostMessage                     sync.RWMutex
	lockSendContextMessage              sync.RWMutex
	lockSetPurposeOfConversationContext sync.RWMutex
	lockUpdateMessage                   sync.RWMutex
}

// AuthTestContext calls AuthTestContextFunc.
func (mock *SlackClientMock) AuthTestContext(ctx context.Context) (*slack.AuthTestResponse, error) {
	if mock.AuthTestContextFunc == nil {
		panic("SlackClientMock.AuthTestContextFunc: method is nil but SlackClient.AuthTestContext was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockAuthTestContext.Lock()
	mock.calls.AuthTestContext = append(mock.calls.AuthTestContext, callInfo)
	mock.lockAuthTestContext.Unlock()
	return mock.AuthTestContextFunc(ctx)
}

// AuthTestContextCalls gets all the calls that were made to AuthTestContext.
// Check the length with:
//
//	len(mockedSlackClient.AuthTestContextCalls())
func (mock *SlackClientMock) AuthTestContextCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockAuthTestContext.RLock()
	calls = mock.calls.AuthTestContext
	mock.lockAuthTestContext.RUnlock()
	return calls
}

// CreateConversation calls CreateConversationFunc.
func (mock *SlackClientMock) CreateConversation(ctx context.Context, params slack.CreateConversationParams) (*slack.Channel, error) {
	if mock.CreateConversationFunc == nil {
		panic("SlackClientMock.CreateConversationFunc: method is nil but SlackClient.CreateConversation was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params slack.CreateConversationParams
	}{
		Ctx:    ctx,
		Params: params,
	}
	mock.lockCreateConversation.Lock()
	mock.calls.CreateConversation = append(mock.calls.CreateConversation, callInfo)
	mock.lockCreateConversation.Unlock()
	return mock.CreateConversationFunc(ctx, params)
}

// CreateConversationCalls gets all the calls that were made to CreateConversation.
// Check the length with:
//
//	len(mockedSlackClient.CreateConversationCalls())
func (mock *SlackClientMock) CreateConversationCalls() []struct {
	Ctx    context.Context
	Params slack.CreateConversationParams
} {
	var calls []struct {
		Ctx    context.Context
		Params slack.CreateConversationParams
	}
	mock.lockCreateConversation.RLock()
	calls = mock.calls.CreateConversation
	mock.lockCreateConversation.RUnlock()
	return calls
}

// GetConversationHistoryContext calls GetConversationHistoryContextFunc.
func (mock *SlackClientMock) GetConversationHistoryContext(ctx context.Context, params *slack.GetConversationHistoryParameters) (*slack.GetConversationHistoryResponse, error) {
	if mock.GetConversationHistoryContextFunc == nil {
		panic("SlackClientMock.GetConversationHistoryContextFunc: method is nil but SlackClient.GetConversationHistoryContext was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *slack.GetConversationHistoryParameters
	}{
		Ctx:    ctx,
		Params: params,
	}
	mock.lockGetConversationHistoryContext.Lock()
	mock.calls.GetConversationHistoryContext = append(mock.calls.GetConversationHistoryContext, callInfo)
	mock.lockGetConversationHistoryContext.Unlock()
	return mock.GetConversationHistoryContextFunc(ctx, params)
}

// GetConversationHistoryContextCalls gets all the calls that were made to GetConversationHistoryContext.
// Check the length with:
//
//	len(mockedSlackClient.GetConversationHistoryContextCalls())
func (mock *SlackClientMock) GetConversationHistoryContextCalls() []struct {
	Ctx    context.Context
	Params *slack.GetConversationHistoryParameters
} {
	var calls []struct {
		Ctx    context.Context
		Params *slack.GetConversationHistoryParameters
	}
	mock.lockGetConversationHistoryContext.RLock()
	calls = mock.calls.GetConversationHistoryContext
	mock.lockGetConversationHistoryContext.RUnlock()
	return calls
}

// GetConversationInfo calls GetConversationInfoFunc.
func (mock *SlackClientMock) GetConversationInfo(ctx context.Context, channelID string, includeLocale bool) (*slack.Channel, error) {
	if mock.GetConversationInfoFunc == nil {
		panic("SlackClientMock.GetConversationInfoFunc: method is nil but SlackClient.GetConversationInfo was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		ChannelID     string
		IncludeLocale bool
	}{
		Ctx:           ctx,
		ChannelID:     channelID,
		IncludeLocale: includeLocale,
	}
	mock.lockGetConversationInfo.Lock()
	mock.calls.GetConversationInfo = append(mock.calls.GetConversationInfo, callInfo)
	mock.lockGetConversationInfo.Unlock()
	return mock.GetConversationInfoFunc(ctx, channelID, includeLocale)
}

// GetConversationInfoCalls gets all the calls that were made to GetConversationInfo.
// Check the length with:
//
//	len(mockedSlackClient.GetConversationInfoCalls())
func (mock *SlackClientMock) GetConversationInfoCalls() []struct {
	Ctx           context.Context
	ChannelID     string
	IncludeLocale bool
} {
	var calls []struct {
		Ctx           context.Context
		ChannelID     string
		IncludeLocale bool
	}
	mock.lockGetConversationInfo.RLock()
	calls = mock.calls.GetConversationInfo
	mock.lockGetConversationInfo.RUnlock()
	return calls
}

// GetConversationRepliesContext calls GetConversationRepliesContextFunc.
func (mock *SlackClientMock) GetConversationRepliesContext(ctx context.Context, params *slack.GetConversationRepliesParameters) ([]slack.Message, bool, bool, error) {
	if mock.GetConversationRepliesContextFunc == nil {
		panic("SlackClientMock.GetConversationRepliesContextFunc: method is nil but SlackClient.GetConversationRepliesContext was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *slack.GetConversationRepliesParameters
	}{
		Ctx:    ctx,
		Params: params,
	}
	mock.lockGetConversationRepliesContext.Lock()
	mock.calls.GetConversationRepliesContext = append(mock.calls.GetConversationRepliesContext, callInfo)
	mock.lockGetConversationRepliesContext.Unlock()
	return mock.GetConversationRepliesContextFunc(ctx, params)
}

// GetConversationRepliesContextCalls gets all the calls that were made to GetConversationRepliesContext.
// Check the length with:
//
//	len(mockedSlackClient.GetConversationRepliesContextCalls())
func (mock *SlackClientMock) GetConversationRepliesContextCalls() []struct {
	Ctx    context.Context
	Params *slack.GetConversationRepliesParameters
} {
	var calls []struct {
		Ctx    context.Context
		Params *slack.GetConversationRepliesParameters
	}
	mock.lockGetConversationRepliesContext.RLock()
	calls = mock.calls.GetConversationRepliesContext
	mock.lockGetConversationRepliesContext.RUnlock()
	return calls
}

// InviteUsersToConversation calls InviteUsersToConversationFunc.
func (mock *SlackClientMock) InviteUsersToConversation(ctx context.Context, channelID string, users ...string) (*slack.Channel, error) {
	if mock.InviteUsersToConversationFunc == nil {
		panic("SlackClientMock.InviteUsersToConversationFunc: method is nil but SlackClient.InviteUsersToConversation was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		ChannelID string
		Users     []string
	}{
		Ctx:       ctx,
		ChannelID: channelID,
		Users:     users,
	}
	mock.lockInviteUsersToConversation.Lock()
	mock.calls.InviteUsersToConversation = append(mock.calls.InviteUsersToConversation, callInfo)
	mock.lockInviteUsersToConversation.Unlock()
	return mock.InviteUsersToConversationFunc(ctx, channelID, users...)
}

// InviteUsersToConversationCalls gets all the calls that were made to InviteUsersToConversation.
// Check the length with:
//
//	len(mockedSlackClient.InviteUsersToConversationCalls())
func (mock *SlackClientMock) InviteUsersToConversationCalls() []struct {
	Ctx       context.Context
	ChannelID string
	Users     []string
} {
	var calls []struct {
		Ctx       context.Context
		ChannelID string
		Users     []string
	}
	mock.lockInviteUsersToConversation.RLock()
	calls = mock.calls.InviteUsersToConversation
	mock.lockInviteUsersToConversation.RUnlock()
	return calls
}

// OpenView calls OpenViewFunc.
func (mock *SlackClientMock) OpenView(ctx context.Context, triggerID string, view slack.ModalViewRequest) (*slack.ViewResponse, error) {
	if mock.OpenViewFunc == nil {
		panic("SlackClientMock.OpenViewFunc: method is nil but SlackClient.OpenView was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		TriggerID string
		View      slack.ModalViewRequest
	}{
		Ctx:       ctx,
		TriggerID: triggerID,
		View:      view,
	}
	mock.lockOpenView.Lock()
	mock.calls.OpenView = append(mock.calls.OpenView, callInfo)
	mock.lockOpenView.Unlock()
	return mock.OpenViewFunc(ctx, triggerID, view)
}

// OpenViewCalls gets all the calls that were made to OpenView.
// Check the length with:
//
//	len(mockedSlackClient.OpenViewCalls())
func (mock *SlackClientMock) OpenViewCalls() []struct {
	Ctx       context.Context
	TriggerID string
	View      slack.ModalViewRequest
} {
	var calls []struct {
		Ctx       context.Context
		TriggerID string
		View      slack.ModalViewRequest
	}
	mock.lockOpenView.RLock()
	calls = mock.calls.OpenView
	mock.lockOpenView.RUnlock()
	return calls
}

// PostMessage calls PostMessageFunc.
func (mock *SlackClientMock) PostMessage(ctx context.Context, channelID string, options ...slack.MsgOption) (string, string, error) {
	if mock.PostMessageFunc == nil {
		panic("SlackClientMock.PostMessageFunc: method is nil but SlackClient.PostMessage was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		ChannelID string
		Options   []slack.MsgOption
	}{
		Ctx:       ctx,
		ChannelID: channelID,
		Options:   options,
	}
	mock.lockPostMessage.Lock()
	mock.calls.PostMessage = append(mock.calls.PostMessage, callInfo)
	mock.lockPostMessage.Unlock()
	return mock.PostMessageFunc(ctx, channelID, options...)
}

// PostMessageCalls gets all the calls that were made to PostMessage.
// Check the length with:
//
//	len(mockedSlackClient.PostMessageCalls())
func (mock *SlackClientMock) PostMessageCalls() []struct {
	Ctx       context.Context
	ChannelID string
	Options   []slack.MsgOption
} {
	var calls []struct {
		Ctx       context.Context
		ChannelID string
		Options   []slack.MsgOption
	}
	mock.lockPostMessage.RLock()
	calls = mock.calls.PostMessage
	mock.lockPostMessage.RUnlock()
	return calls
}

// SendContextMessage calls SendContextMessageFunc.
func (mock *SlackClientMock) SendContextMessage(ctx context.Context, channelID string, messageTS string, contextText string) string {
	if mock.SendContextMessageFunc == nil {
		panic("SlackClientMock.SendContextMessageFunc: method is nil but SlackClient.SendContextMessage was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		ChannelID   string
		MessageTS   string
		ContextText string
	}{
		Ctx:         ctx,
		ChannelID:   channelID,
		MessageTS:   messageTS,
		ContextText: contextText,
	}
	mock.lockSendContextMessage.Lock()
	mock.calls.SendContextMessage = append(mock.calls.SendContextMessage, callInfo)
	mock.lockSendContextMessage.Unlock()
	return mock.SendContextMessageFunc(ctx, channelID, messageTS, contextText)
}

// SendContextMessageCalls gets all the calls that were made to SendContextMessage.
// Check the length with:
//
//	len(mockedSlackClient.SendContextMessageCalls())
func (mock *SlackClientMock) SendContextMessageCalls() []struct {
	Ctx         context.Context
	ChannelID   string
	MessageTS   string
	ContextText string
} {
	var calls []struct {
		Ctx         context.Context
		ChannelID   string
		MessageTS   string
		ContextText string
	}
	mock.lockSendContextMessage.RLock()
	calls = mock.calls.SendContextMessage
	mock.lockSendContextMessage.RUnlock()
	return calls
}

// SetPurposeOfConversationContext calls SetPurposeOfConversationContextFunc.
func (mock *SlackClientMock) SetPurposeOfConversationContext(ctx context.Context, channelID string, purpose string) (*slack.Channel, error) {
	if mock.SetPurposeOfConversationContextFunc == nil {
		panic("SlackClientMock.SetPurposeOfConversationContextFunc: method is nil but SlackClient.SetPurposeOfConversationContext was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		ChannelID string
		Purpose   string
	}{
		Ctx:       ctx,
		ChannelID: channelID,
		Purpose:   purpose,
	}
	mock.lockSetPurposeOfConversationContext.Lock()
	mock.calls.SetPurposeOfConversationContext = append(mock.calls.SetPurposeOfConversationContext, callInfo)
	mock.lockSetPurposeOfConversationContext.Unlock()
	return mock.SetPurposeOfConversationContextFunc(ctx, channelID, purpose)
}

// SetPurposeOfConversationContextCalls gets all the calls that were made to SetPurposeOfConversationContext.
// Check the length with:
//
//	len(mockedSlackClient.SetPurposeOfConversationContextCalls())
func (mock *SlackClientMock) SetPurposeOfConversationContextCalls() []struct {
	Ctx       context.Context
	ChannelID string
	Purpose   string
} {
	var calls []struct {
		Ctx       context.Context
		ChannelID string
		Purpose   string
	}
	mock.lockSetPurposeOfConversationContext.RLock()
	calls = mock.calls.SetPurposeOfConversationContext
	mock.lockSetPurposeOfConversationContext.RUnlock()
	return calls
}

// UpdateMessage calls UpdateMessageFunc.
func (mock *SlackClientMock) UpdateMessage(ctx context.Context, channelID string, timestamp string, options ...slack.MsgOption) (string, string, string, error) {
	if mock.UpdateMessageFunc == nil {
		panic("SlackClientMock.UpdateMessageFunc: method is nil but SlackClient.UpdateMessage was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		ChannelID string
		Timestamp string
		Options   []slack.MsgOption
	}{
		Ctx:       ctx,
		ChannelID: channelID,
		Timestamp: timestamp,
		Options:   options,
	}
	mock.lockUpdateMessage.Lock()
	mock.calls.UpdateMessage = append(mock.calls.UpdateMessage, callInfo)
	mock.lockUpdateMessage.Unlock()
	return mock.UpdateMessageFunc(ctx, channelID, timestamp, options...)
}

// UpdateMessageCalls gets all the calls that were made to UpdateMessage.
// Check the length with:
//
//	len(mockedSlackClient.UpdateMessageCalls())
func (mock *SlackClientMock) UpdateMessageCalls() []struct {
	Ctx       context.Context
	ChannelID string
	Timestamp string
	Options   []slack.MsgOption
} {
	var calls []struct {
		Ctx       context.Context
		ChannelID string
		Timestamp string
		Options   []slack.MsgOption
	}
	mock.lockUpdateMessage.RLock()
	calls = mock.calls.UpdateMessage
	mock.lockUpdateMessage.RUnlock()
	return calls
}
