package cli

import (
	"bytes"
	"context"
	"fmt"
	"os"

	"github.com/m-mizutani/goerr/v2"
	"github.com/secmon-lab/lycaon/pkg/domain/model"
	"github.com/urfave/cli/v3"
	"gopkg.in/yaml.v3"
)

// ConfigInitCommand is the config management command
var ConfigInitCommand = &cli.Command{
	Name:  "config",
	Usage: "Config management commands",
	Commands: []*cli.Command{
		{
			Name:  "init",
			Usage: "Initialize configuration file with default template",
			Flags: []cli.Flag{
				&cli.StringFlag{
					Name:    "output",
					Aliases: []string{"o"},
					Usage:   "Output file path",
					Value:   "lycaon.yaml",
				},
				&cli.BoolFlag{
					Name:    "force",
					Aliases: []string{"f"},
					Usage:   "Overwrite existing configuration file without confirmation",
				},
			},
			Action: configInitAction,
		},
	},
}

// getDefaultCategoriesForConfig returns default categories for configuration file generation
func getDefaultCategoriesForConfig() *model.CategoriesConfig {
	return &model.CategoriesConfig{
		Categories: []model.Category{
			{
				ID:           "security_incident",
				Name:         "Security Incident",
				Description:  "Security-related incidents including unauthorized access and malware infections",
				InviteUsers:  []string{"@security-lead"},
				InviteGroups: []string{"@security-team"},
			},
			{
				ID:           "system_failure",
				Name:         "System Failure",
				Description:  "System or service failures and outages",
				InviteUsers:  []string{"@sre-lead"},
				InviteGroups: []string{"@sre-oncall"},
			},
			{
				ID:          "performance_issue",
				Name:        "Performance Issue",
				Description: "System performance degradation or response time issues",
			},
			{
				ID:          "unknown",
				Name:        "Unknown",
				Description: "Incidents that cannot be categorized",
			},
		},
	}
}

func configInitAction(ctx context.Context, c *cli.Command) error {
	filename := c.String("output")
	force := c.Bool("force")

	// Check if file exists
	if _, err := os.Stat(filename); err == nil && !force {
		// Prompt for confirmation
		fmt.Printf("Configuration file '%s' already exists. Overwrite? (y/N): ", filename)
		var response string
		_, _ = fmt.Scanln(&response)
		if response != "y" && response != "Y" {
			fmt.Println("Operation cancelled.")
			return nil
		}
	}

	// Generate template
	config := getDefaultCategoriesForConfig()

	// Create encoder with proper indentation (2 spaces)
	var buf bytes.Buffer
	encoder := yaml.NewEncoder(&buf)
	encoder.SetIndent(2)

	if err := encoder.Encode(config); err != nil {
		return goerr.Wrap(err, "failed to marshal configuration")
	}
	if err := encoder.Close(); err != nil {
		return goerr.Wrap(err, "failed to close encoder")
	}

	data := buf.Bytes()

	// Add header comment
	header := "# Lycaon Configuration File\n# Generated by 'lycaon config init'\n\n"
	data = append([]byte(header), data...)

	// Write file with secure permissions
	if err := os.WriteFile(filename, data, 0600); err != nil {
		return goerr.Wrap(err, "failed to write configuration file")
	}

	fmt.Printf("Configuration file '%s' has been created successfully.\n", filename)
	return nil
}
